PARSER_BEGIN (P6EJ1) //unidad de compilación javacc
//Ejercicio 6 para entregar a la asignatura de Procesadores del lenguaje.
//Se ha intentado introducir una intrucción iterativa pero el resultado ha sido no satisfactorio
//Se ha añadido un tipo de bloque condicional además del original y el calculo de raices de polinomios

	import java.util.HashMap;
	import java.util.Map;
	import java.util.ArrayList;
	import java.util.Arrays;
	import java.util.concurrent.CountDownLatch;
	import java.util.concurrent.ExecutorService;
	import java.util.concurrent.Executors;
	import java.util.concurrent.Semaphore;
	import static java.lang.Math.pow;
	
	
	//ESTAS CLASES SON AUXILIARES Y SIRVEN PARA CALCULAR RAICES DE POLINOMIOS DE GRADO SUPERIOR A 4.
	
	//Esto es la clase responsable del calculo de raices, fue desarrollada en sistemas distribuidos basandome en lo que se vió en MAM, usa hilos para mejor eficiencia
	//Ha sido adaptada para esta calculadora y javacc, es original mía y me llevo cariño y esfuerzo desarrollarla, los conceptos estaban en MAM pero el código salió de mis dedos
	//Disfrutadla!
	//Esta se encarga de encontrar los parametros necesarios para localizar las raices y una vez las localiza las calcula con un metodo que converja a las mismas
	//este método está en la clase calculaRaiz y usa Newton-Raphson
	class CalcularRaices extends Thread{

		private ArrayList<Double> polinomio;
		
		public CalcularRaices(ArrayList<Double> polinomio) {
			int cont = polinomio.size()-1;
			for(int i = polinomio.size()-1; i >= 0; --i){
				if(polinomio.get(i) != 0)
					break;
				--cont;
			}
			
			ArrayList<Double> aux = new ArrayList<Double>();
			for(int i = 0; i <= cont; ++i){
				aux.add(polinomio.get(i));
			}
			
			this.polinomio = aux;
			
		}
		
		public void run() {
			//En este hilo que será unico para cada polinomio, 1º con la regla de signos de Descartes
			//tratar de ver más o menos cuantas raices positivas y negativas reales.
			//2º acotación de las raices con MacLaurin
			//3º (puramente educativo) buscamos posibles raíces enteras usando la regla de Horner.
			//4º aplicamos sturm para obtener la secuencia del mismo {P(x),P1(x),...,Pn(x)} donde P es nuestro polinomio, P1 su derivada y 
			//Pk(x) es el resto cambiado de signo de Pk-2(x)/Pk-1(x) para 2<=k<=n.
			int NumCambiosDeSignoRNeg=0, NumCambiosDeSignoRPos=0;
			
			//Aplicamos la regla de signos de Descartes
			ArrayList<Double> Descartes = new ArrayList();
			ArrayList<Double> DescartesNeg = new ArrayList();
			for(int i=0; i<this.polinomio.size(); i++) {
				if(this.polinomio.get(i)!=0) {
					Descartes.add(this.polinomio.get(i));
					if(i%2==0) {
						DescartesNeg.add(this.polinomio.get(i));
					}else
						DescartesNeg.add(this.polinomio.get(i)*-1);
				}
			}
			for(int i=0;i<Descartes.size()-1;i++) {	
				if(Descartes.get(i)*Descartes.get(i+1)<0) {
					NumCambiosDeSignoRPos++;
				}
				if(DescartesNeg.get(i)*DescartesNeg.get(i+1)<0)
					NumCambiosDeSignoRNeg++;
			}
			
			//Ahora vamos a calcular las cotas con el Método de MacLaurin -> (1/(1+μ) < |ζi| < (1+λ) donde {ζ1,...,ζn} C Complejos las raices n raices. 
			//Primero calculamos μ, con μ = máximo de {|ak/a0|} donde 1<=k<=n y a es el coeficiente de x.
			double mu;
			double cotaMinima;
			if(this.polinomio.get(0)==0||this.polinomio.size()==1) {
				mu=0;
				cotaMinima=0;
			}else {
				mu=(this.polinomio.get(1)/this.polinomio.get(0));
				for(int i=1;i<this.polinomio.size();++i) {
					if(mu<Math.abs(this.polinomio.get(i)/this.polinomio.get(0)))
						mu=Math.abs(this.polinomio.get(i)/this.polinomio.get(0));
				}
				cotaMinima = 1/(1+mu);
			}
			
			//Ahora calculamos λ, con λ = máximo de {|ak/an|} donde 0<=k<=n-1 y a es el coeficiente de x.
			Double lambda=Math.abs((this.polinomio.get(0)/this.polinomio.get(this.polinomio.size()-1)));
			for(int i=0;i<this.polinomio.size()-1;++i) {
				if(lambda<Math.abs(this.polinomio.get(i)/this.polinomio.get(this.polinomio.size()-1)))
					lambda=Math.abs(this.polinomio.get(i)/this.polinomio.get(this.polinomio.size()-1));
			}
			Double cotaMaxima = 1+lambda;
			
			//Usando la regla de Horner calculamos las posibles raices enteras, este paso es totalmente opcional, es solo puramente lúdico.
			ArrayList<Double> PosiblesRaicesEnteras = new ArrayList();
			Double a0 = this.polinomio.get(0);
			for(int i=1;i<=a0;i++) {
				if(a0%i==0) {
					PosiblesRaicesEnteras.add((double)i);
					PosiblesRaicesEnteras.add((double)-i);
				}
			}
			
			//aplicamos sturm:
			
			//Primero calculamos la derivada:
			ArrayList<Double> p1 = this.Derivar(this.polinomio);
			
			//Calculamos la secuencia:
			ArrayList<ArrayList<Double>> listaDePolinomios = new ArrayList();
			listaDePolinomios.add(this.polinomio);
			listaDePolinomios.add(p1);
			boolean RaicesSimples = SecuenciaSturm(p1,this.polinomio,listaDePolinomios,this.polinomio.size()-1,2);
			
			//Teniendo la secuencia de sturm aplicamos el teorema sirviendonos del metodo de la bisección hasta encontrar 1 solo cambio de signo:
			try{
				if(Math.abs(TeoremaSturm(listaDePolinomios,cotaMaxima*-1)-TeoremaSturm(listaDePolinomios,cotaMaxima))==0) {
					if(this.polinomio.size()==1&&this.polinomio.get(0)==0) {
						System.out.println("La recta real son las raíces de la función"+"\r\n");
					}else {
						System.out.println("No existen raices reales"+"\r\n");
					}
				}else {
					int numeroRaices = Math.abs(TeoremaSturm(listaDePolinomios,cotaMaxima*-1)-TeoremaSturm(listaDePolinomios,cotaMaxima));
					ExecutorService pool = Executors.newFixedThreadPool(numeroRaices);
					Semaphore sem = new Semaphore(1);
					CountDownLatch count = new CountDownLatch(Math.abs(TeoremaSturm(listaDePolinomios,cotaMaxima*-1)-TeoremaSturm(listaDePolinomios,cotaMaxima)));
					LocalizarRaices(pool,listaDePolinomios,cotaMaxima*-1,cotaMaxima,sem,count);
					count.await();
				}
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
			
			
		}
		
		public static ArrayList<Double> Derivar(ArrayList<Double> polinomio){
			ArrayList<Double> derivada = new ArrayList();
			for(int i=1; i<polinomio.size();i++) {
				derivada.add(polinomio.get(i)*i);
			}
			return derivada;
		}
		
		public boolean SecuenciaSturm(ArrayList<Double> imenos2,ArrayList<Double> imenos1, ArrayList<ArrayList<Double>> listaDePolinomios, int grado, int numPaso){
			if(numPaso<=grado) {
				Double ultimoCoefi1 = imenos1.get(imenos1.size()-1);
				int gradoDeCoefi1 = imenos1.size()-1;
				Double ultimoCoefi2 = imenos2.get(imenos2.size()-1);
				int gradoDeCoefi2 = imenos2.size()-1;
				ArrayList<Double> aux = new ArrayList();
				ArrayList<Double> copia = (ArrayList<Double>)imenos1.clone();
				while(gradoDeCoefi2<=gradoDeCoefi1) {
					Double coeficoci = ultimoCoefi1/ultimoCoefi2;
					int gradococi = gradoDeCoefi1-gradoDeCoefi2;
					for(int i=0;i<gradoDeCoefi1;i++) {
						aux.add(i, null);
					}
					for(int i=0;i<=gradoDeCoefi2-1;i++) {
						Double resta = imenos2.get(i)*coeficoci;
						aux.set(i+gradococi,copia.get(i+gradococi)-resta);
					}
					for(int i=0;i<gradoDeCoefi1;i++) {
						if(aux.get(i)==null) {
							aux.set(i, copia.get(i));
						}
					}
					int cont = aux.size()-1;
					while(cont>=0&&aux.get(cont)==0) {
						aux.remove(cont);
						cont--;
					}
					copia = (ArrayList<Double>)aux.clone();
					aux.clear();
					gradoDeCoefi1 = copia.size()-1;
					if(copia.size()==0) {
						gradoDeCoefi1=0;
					}else
						ultimoCoefi1 = copia.get(copia.size()-1);
				}
				if(copia.size()==0) {
					return false;
				}
				if(copia.size()==1) {
					if(copia.get(copia.size()-1)==0) {
						return false;
					}else {
						for(int i=0; i<copia.size();i++) {
							copia.set(i,copia.get(i)*-1);
						}
						listaDePolinomios.add(copia);
						return true;
					}
				}else {
					for(int i=0; i<copia.size();i++) {
						copia.set(i,copia.get(i)*-1);
					}
					listaDePolinomios.add(copia);
					return SecuenciaSturm(copia,imenos2,listaDePolinomios,grado,(numPaso+1));
				}
			}else {
				return false;
			}
		}
		
		public int TeoremaSturm(ArrayList<ArrayList<Double>> listaDePolinomios,Double x) {
			ArrayList<String> signos = new ArrayList();
			for(int i=0;i<listaDePolinomios.size();i++) {
				double total=0;
				for(int j=0;j<listaDePolinomios.get(i).size();j++) {
					total += listaDePolinomios.get(i).get(j)*Math.pow(x, j);
				}
				if(total<0) {
					signos.add("-");
				}else {
					signos.add("+");
				}
			}
			int cambios=0;
			for(int i=0;i<signos.size();i++) {
				if(i<signos.size()-1&&!(signos.get(i).equals(signos.get(i+1)))) {
					cambios++;
				}
			}
			return cambios;
		}
		
		public void LocalizarRaices(ExecutorService pool,ArrayList<ArrayList<Double>> listaDePolinomios,Double cotaMaximaIz,Double cotaMaximaDer, Semaphore sem,CountDownLatch count) {
			CalcularRaiz a;
			CalcularRaiz b;
			if(Math.abs(TeoremaSturm(listaDePolinomios,cotaMaximaIz)-TeoremaSturm(listaDePolinomios,cotaMaximaDer))==1) {
				if(TeoremaSturm(listaDePolinomios,cotaMaximaIz)-TeoremaSturm(listaDePolinomios,(cotaMaximaDer+cotaMaximaIz)/2)==1) {
					a = new CalcularRaiz(this.polinomio,(cotaMaximaIz+(cotaMaximaDer+cotaMaximaIz)/2)/2,(Double)Math.pow(10, -15),sem,count);
					pool.execute(a);
				}else {
					a = new CalcularRaiz(this.polinomio,(cotaMaximaDer+(cotaMaximaDer+cotaMaximaIz)/2)/2,(Double)Math.pow(10, -15),sem,count);
					pool.execute(a);
				}
			}else {
				Double c = (cotaMaximaDer+cotaMaximaIz)/2;			
				if(Math.abs(TeoremaSturm(listaDePolinomios,cotaMaximaIz)-TeoremaSturm(listaDePolinomios,c))==1){
					a = new CalcularRaiz(this.polinomio,(cotaMaximaIz+c)/2,(Double)Math.pow(10, -15),sem,count);
					pool.execute(a);
				}
				if(Math.abs(TeoremaSturm(listaDePolinomios,c)-TeoremaSturm(listaDePolinomios,cotaMaximaDer))==1){
					b = new CalcularRaiz(this.polinomio,(cotaMaximaDer+c)/2,(Double)Math.pow(10, -15),sem,count);
					pool.execute(b);
				}
				if(Math.abs(TeoremaSturm(listaDePolinomios,cotaMaximaIz)-TeoremaSturm(listaDePolinomios,c))>1){				
					LocalizarRaices(pool,listaDePolinomios,cotaMaximaIz,c,sem,count);
				}
				if(Math.abs(TeoremaSturm(listaDePolinomios,c)-TeoremaSturm(listaDePolinomios,cotaMaximaDer))>1) {
					LocalizarRaices(pool,listaDePolinomios,c,cotaMaximaDer,sem,count);
				}			
			}
		}

	}

	//Este es el hilo que se encarga de calcular las raices de manera individual por Newton Raphson
	class CalcularRaiz extends Thread{
		
		private ArrayList<Double> polinomio;
		private double puntoInicio;
		private double error;
		private double resultado;
		private Semaphore sem;
		private CountDownLatch cl;
		
		public CalcularRaiz(ArrayList<Double> pol, double puntoInicio,double error,Semaphore sem,CountDownLatch cl) {
			this.polinomio=pol;
			this.puntoInicio=puntoInicio;
			this.error=error;
			this.sem=sem;
			this.cl=cl;
		}
		
		
		public void run() {
		
			//Aplicaremos el metodo iterativo de Newton-Raphson para calcular la raiz en cuestion:
			double aproximacionAnterior=this.puntoInicio;
			ArrayList<Double> derivada = CalcularRaices.Derivar(this.polinomio);
			double evaDerivada = evaluacion(derivada,this.puntoInicio);
			if(evaDerivada==0)
				this.puntoInicio*=2;
			double aproximacion = this.puntoInicio-evaluacion(polinomio,this.puntoInicio)/evaluacion(derivada,this.puntoInicio);
			while(Math.abs(aproximacion-aproximacionAnterior)>error) {
				aproximacionAnterior=aproximacion;
				aproximacion = aproximacion - (evaluacion(polinomio,aproximacion)/evaluacion(derivada,aproximacion));
			}
			try {
				this.resultado=aproximacionAnterior;
				sem.acquire();
				this.Escribir();
				sem.release();
				cl.countDown();
				
			}catch(InterruptedException e) {
				e.printStackTrace();
			}
			
		}
		
		public double evaluacion(ArrayList<Double> polinomio, double x) {
			double resultado=0;
			for(int i=0;i<polinomio.size();i++) {
				resultado+=polinomio.get(i)*Math.pow(x, i);
			}
			return resultado;
		}
		
		public double getResultado() {
			return this.resultado;
		}
		
		public synchronized void Escribir() {
			if(Math.abs(this.resultado)<Math.pow(10, -9)) {
				System.out.println("Raiz: " + String.valueOf(resultado)+" Aprox: 0"+"\r\n");
			}else
				System.out.println("Raiz: " + String.valueOf(resultado)+"\r\n");
		}

	}

		class P6EJ1 {
		
		public static Map<String,Integer> variables = new HashMap<String,Integer>();
		public static int ans;
		public static double[] polinomioG = new double[100];

		public static void main(String[] args) throws ParseException, TokenMgrError {

		  //llamada a uno de los constructores por defecto
		  P6EJ1 parser = new P6EJ1 (System.in);
		  //llamada al método del símbolo inicial
		  parser.inicio(); }
		  
		public static boolean comparar(String comparador, int expresion1, int expresion2){
			
			switch(comparador){
			
				case "<":
					return (expresion1 < expresion2);
				case ">":
					return (expresion1 > expresion2);
				case "==":
					return (expresion1 == expresion2);
				case ">=":
					return (expresion1 >= expresion2);
				case "<=":
					return (expresion1 <= expresion2);
				case "!=":
					return (expresion1 != expresion2);
				default:
					return false;}
			}
		}

PARSER_END (P6EJ1)

//TOKEN: {<FOR: "Para"| "para">}
//TOKEN:{<DO: "hacer"|"Hacer">}

SKIP: {"\r" | " " | "\n"}
TOKEN:{<EOL: ";">}
TOKEN:{<DECIMAL: (["0"-"9"])+>}
TOKEN:{<BINARIO: (["0"-"1"])+"b">}
TOKEN:{<OCTAL: (["0"-"7"])+"o">}
TOKEN:{<MAYOR: ">"> | <MENOR: "<"> | <IGUAL: "=="> | <MAYOIG: ">=" > | <MENOIG: "<=" > | <DISTINTO: "!=">}
TOKEN:{<IF: "si"|"Si">}
TOKEN:{<ELIF: "si no si"|"Si no si">}
TOKEN:{<THEN: "entonces"|"Entonces">}
TOKEN:{<ELSE: "si no"|"Si no">}
TOKEN:{<X: "x" | "x^">}
TOKEN:{<RAIZ: "RT">}
TOKEN:{<SOLVE: "SV">}
TOKEN:{<ID: ["A"-"z"](["A"-"z"])*>}
TOKEN:{<ANS: "$">}

//Simbolo inicial, es el que llama a línea y muestra el resultado por pantalla
void inicio(): {int resultado;}
{

    (resultado=Linea()
	{
		System.out.println("Resultado: "+resultado);
	}
	)+

    <EOF>


}

//No terminal Linea para la gramática, llama o a Asignacion o a Expresion o a CalcularRaices o a ResolverPolinomio o a Condicional o (por último) a CondicionalExt
int Linea() :{int resultado = 0;}
{

	( LOOKAHEAD(2) resultado = Asignacion() <EOL> 
	| LOOKAHEAD(2) resultado=Expresion() <EOL> 
	| LOOKAHEAD(2) CalcularRaices() <EOL> 
	| LOOKAHEAD(2) resultado=ResolverPolinomio() <EOL> 
	| LOOKAHEAD(2) resultado = Condicional() 
	| LOOKAHEAD(2) resultado=CondicionalExt()  
	/*LOOKAHEAD(2) resultado = BucleFor()*/ )
	{ans = resultado;
	return resultado;}

}

//Reconoce un toquen ID el igual y la expresión a asignar, coloca esa variable en la tabla de variables.
int Asignacion():{int resultado; Token t;}
{

	t=<ID> "=" resultado = Expresion()
	
	{
	variables.put(t.image, resultado);
	
	return resultado;}

}

//No terminal Expresion de la gramática, reconoce un termino seguido por 0 o más simbolos "+" o "-" y terminos, luego calcula el valor de sumarlos o restarlos.
int Expresion(): {int resultado, termino;
					String simbolo;}
{
	resultado=Termino()((simbolo="+".image|simbolo="-".image) termino=Termino()
	{
		if(simbolo == "+"){
			resultado += termino;
		}else{
			resultado -= termino;
			}
	}
	)*
	
	{return resultado;}
	
}

//No terminal Termino de la gramática, la idea es similar al del anterior, reconoce factor seguido de 0 o más simbolos "*" o "/" y terminos, calcula la operación y la devuelve.
int Termino(): {int resultado, factor;
				String simbolo;}
{

	resultado=Factor()((simbolo="*".image|simbolo="/".image) factor=Factor()
	{
		if(simbolo == "*"){
			resultado *= factor;
		}else{
			resultado /= factor;
			}
	}
	)*
	
	{return resultado;}

}

//No terminal Factor de la gramática, espera opcionalmente un signo menos, un Numero o una expresion entre parentesis o una variable o el ANS.
int Factor(): {int resultado; boolean signo = false;}
{

	("-" {signo = true;})?(resultado = Numero() | ("(" resultado = Expresion() ")" ) | resultado = Variable() | <ANS> {resultado = ans;}) 
	
	{
	if(signo)
		return -1*resultado;
	else
		return resultado;}

}

//Devuelve el resultado de la imagen de la variable en la tabla de variables.
int Variable(): {int resultado; Token t;}
{

	(t=<ID> {resultado = variables.get(t.image);})
	
	{return resultado;}

}

//No terminal que reconoce si es un numero octal, binario o decimal y en segun el caso cambia de base a 10.
int Numero(): {Token t;
				int resultado;}
{

	    ((t=<DECIMAL> | t=<OCTAL> | t=<BINARIO>)
	{
		if(t.image.charAt(t.image.length()-1) == 'b'){
			resultado = Integer.parseInt(t.image.substring(0, t.image.length()-1),2);
			}
		else if(t.image.charAt(t.image.length()-1) == 'o'){
			resultado = Integer.parseInt(t.image.substring(0, t.image.length()-1),8);
			}
		else{
			resultado = Integer.parseInt(t.image);
			}
	}
		{return resultado;}
	)

}

//Este no terminal condicional extendido tiene una sintaxis muy similar al if de programacion pero en castellano y con alguna modificación
//Comienza con un token "si" un parentesis, una expresión el comparador otra expresión el parentesis que cierra la condición un token "entonces" la expresión a ejecutar en ese caso
//un token "si no si" y su condición similar al anterior entre paréntesis y la expresión a ejecutar en el caso de que se cumpliese ese else if y por ultimo el "si no" que es el else
//que contiene una expresión que se ejecutará en el caso de que ninguna otra condición se cumpla.
int CondicionalExt(): {String comparador;
					int expresion1, expresion2, entonces = 0, sino, i=0;
					boolean condicion = false;
					boolean condiciones[] = new boolean[50];
					int entonceses[] = new int[50];}
{

	( <IF>"(" expresion1 = Expresion()(comparador=<MENOR>.image 
										| comparador=<MAYOR>.image 
										| comparador=<IGUAL>.image 
										| comparador=<MENOIG>.image
										| comparador=<MAYOIG>.image
										| comparador=<DISTINTO>.image) expresion2=Expresion() ")"  <THEN> entonceses[i] = Linea() )
	{		condiciones[i] = comparar(comparador, expresion1, expresion2);
			++i;
	}
	( <ELIF> "(" expresion1 = Expresion()(comparador="<".image | comparador=">".image | comparador="==".image) expresion2=Expresion() ")" <THEN> entonceses[i] = Linea()
	{		condiciones[i] = comparar(comparador, expresion1, expresion2);
			++i;
	})*	
	<ELSE> sino = Linea()
	{
		for(int j = 0; j < condiciones.length; ++j){
			if (condiciones[j]){
				condicion = true;
				entonces = entonceses[j];
				break;
			}
		}
		if(condicion)
			return entonces;
		else
			return sino;
	}

}

//Este condicional es tal cual el condicional que se pide en el ejercicio pero se añaden más modos de comparar "<=" ">=" "!="
int Condicional():{int expresion1, expresion2, entonces, sino;
				   boolean comparacion;
				   String comparador;}
	{
		( "(" (comparador=<MENOR>.image 
				| comparador=<MAYOR>.image 
				| comparador=<IGUAL>.image 
				| comparador=<MENOIG>.image
				| comparador=<MAYOIG>.image
				| comparador=<DISTINTO>.image) expresion1 = Expresion() expresion2=Expresion() ")"  entonces = Expresion() ":" sino = Expresion() )
		
		{comparacion = comparar(comparador, expresion1, expresion2);
		if(comparacion)
			return entonces;
		else
			return sino;
		}
		
	}
	
//Este no terminal es el responsable de calcular las raices del polinomio
//Llamando a la clase de arriba del fichero, comienza reconociendo el token "RT:"
void CalcularRaices():{}

{
		<RAIZ> ":"  Polinomio()
		{
			
			ArrayList<Double> lista = new ArrayList<Double>();
			for( double item: polinomioG)
				lista.add(item);
			
			CalcularRaices a = new CalcularRaices(lista);
			a.start();
			
			polinomioG = new double[100];
			
		}
}

//Este no terminal recoge el polinomio llamando a Polinomio y evalua el valor introducido despues del polinomio en el mismo.
//Este no terminal comienza reconociendo el toquen "SV:"
int ResolverPolinomio(): {int susti; 
						 double resultado = 0;}
{
	<SOLVE> ":" Polinomio() "," susti = Expresion()
	{
		ArrayList<Double> polinomio = new ArrayList<Double>();
		for( double item: polinomioG)
			polinomio.add(item);
		
		int cont = polinomio.size()-1;
		for(int i = polinomio.size()-1; i >= 0; --i){
			if(polinomio.get(i) != 0)
				break;
			--cont;
		}
		
		ArrayList<Double> aux = new ArrayList<Double>();
		
		for(int i = 0; i <= cont; ++i){
			aux.add(polinomio.get(i));
		}
		
		for(int i=0; i<aux.size(); i++){
		  if(i == 0)
			resultado += aux.get(0);
		  else
			resultado += aux.get(i)*pow(susti,i);
		}
		
		polinomioG = new double[100];
		
		return (int) Math.round(resultado);
		
	}
}

//Un no terminal que es un monomio seguido de 0 o más monomios
void Polinomio():{}
{
	
	Monomio() (Monomio())*
	
}

//Reconoce un signo el coeficiente, la "x" el exponente, el exponente es opcional luego la x estará elevada a 1, la x y el exponente es opcional luego será el termino independiente
//Y el coeficiente es opcional luego será la x sola
void Monomio():{boolean signo = false, solox = true, termInd = true;
				int coeficiente=1, exponente=0;}
{
	
	( "+" | "-" {signo = true;}) (coeficiente = Numero())? (<X> ( exponente = Numero(){solox = false;})? {termInd = false;})? 
	
	{
	if(termInd){
		exponente = 0;
	}
	if(solox && !termInd){
		exponente = 1;
	}
	
	if(signo){
		coeficiente *= -1;
	}

	polinomioG[exponente] += Double.valueOf(coeficiente);
	
	}
	
}

//Este es el intento de estructura iterativa que no ha dado resultado.
/*int BucleFor(): {String comparador; boolean condicion=false; int expresion2, acumulador;  Token tID;}
{

	( <FOR> "(" tID = <ID>(comparador="<".image | comparador=">".image | comparador="==".image) expresion2=Expresion() <EOL> 
		<ID> "+" acumulador=Numero() ")"  <DO> <SALTO> )
		Asignacion() <SALTO>
			{
				switch(comparador){
					case "<":
						condicion = (variables.get(tID.image) < expresion2);
						break;
					case ">":
						condicion = (variables.get(tID.image) > expresion2);
						break;
					case "==":
						condicion = (variables.get(tID.image) == expresion2);
						break;
				}
				if(condicion){
					variables.put(tID.image, variables.get(tID.image)+acumulador);
					return BucleForCondicion(condicion, tID, acumulador, comparador, expresion2);
				}
		}
}

int BucleForCondicion(boolean condicion, Token t, int acumulador, String comparador, int expresion2): {}
{
		Asignacion() <SALTO>
		{		switch(comparador){
			case "<":
				condicion = (variables.get(t.image) < expresion2);
				break;
			case ">":
				condicion = (variables.get(t.image) > expresion2);
				break;
			case "==":
				condicion = (variables.get(t.image) == expresion2);
				break;
		}
		if(condicion){
			variables.put(t.image, variables.get(t.image)+acumulador);
			return BucleForCondicion(condicion, t, acumulador, comparador, expresion2);
		}else
			return acumulador;
		}
}*/